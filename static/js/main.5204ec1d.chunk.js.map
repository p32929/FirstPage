{"version":3,"sources":["serviceWorker.js","Others/OvermindHelper.js","Others/Globals.js","Components/MyLinkItem.js","Components/FirstPage.js","index.js"],"names":["Boolean","window","location","hostname","match","useOvermind","createHook","overmind","createOvermind","state","urls","isShowingDialog","isModeDelete","actions","setUrls","addUrl","url","deleteUrl","index","splice","length","showDialog","b","setDeleteMode","Globals","height","innerHeight","width","innerWidth","maxHeight","maxWidth","num","SavedDataManager","jsonStr","localStorage","getItem","local_json","JSON","parse","setItem","stringify","MyLinkItem","props","item","Grid","Button","onClick","saveUrls","open","link","style","color","variant","title","prototype","PropTypes","shape","string","isRequired","FirstPage","useEffect","getUrls","getParentHeightWidth","container","direction","alignContent","alignItems","justify","getContainerHeightWidth","spacing","map","margin","Dialog","onClose","DialogTitle","DialogContent","TextField","id","marginTop","placeholder","DialogActions","document","getElementById","value","toString","startsWith","autoFocus","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5204ec1d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// npm install overmind overmind-react\r\n// yarn add overmind overmind-react\r\n\r\nimport {createOvermind} from \"overmind\";\r\nimport {createHook} from \"overmind-react\";\r\n\r\nexport const useOvermind = createHook();\r\nexport const overmind = createOvermind({\r\n    state: {\r\n        urls: [],\r\n        isShowingDialog: false,\r\n        isModeDelete: false,\r\n    },\r\n    actions: {\r\n        setUrls({state}, urls) {\r\n            state.urls = urls\r\n        },\r\n        addUrl({state}, url) {\r\n            state.urls = [\r\n                ...state.urls,\r\n                url\r\n            ]\r\n        },\r\n        deleteUrl({state}, index) {\r\n            state.urls.splice(index, 1)\r\n            if (state.urls.length == 0) {\r\n                state.isModeDelete = false\r\n            }\r\n        },\r\n        showDialog({state}, b) {\r\n            state.isShowingDialog = b\r\n        },\r\n        setDeleteMode({state}, b) {\r\n            state.isModeDelete = b\r\n        },\r\n    }\r\n});\r\n","export class Globals {\r\n    static getParentHeightWidth() {\r\n        var height = window.innerHeight;\r\n        var width = window.innerWidth;\r\n        if (height < 550) {\r\n            height = 550;\r\n        }\r\n        if (width < 350) {\r\n            width = 350;\r\n        }\r\n\r\n        return {\r\n            maxHeight: height,\r\n            maxWidth: width,\r\n            height: height,\r\n            width: width\r\n        }\r\n    }\r\n\r\n    static getContainerHeightWidth(num) {\r\n        var height = window.innerHeight;\r\n        var width = window.innerWidth;\r\n        if (height < 550) {\r\n            height = 550;\r\n        }\r\n        if (width < 350) {\r\n            width = 350;\r\n        }\r\n\r\n        return {\r\n            maxHeight: height * num / 100,\r\n            maxWidth: width,\r\n            height: height * num / 100,\r\n            width: width,\r\n        }\r\n    }\r\n}\r\n\r\nexport class SavedDataManager {\r\n    static  local_json = \"local_json\"\r\n\r\n    static getUrls() {\r\n        var jsonStr = localStorage.getItem(SavedDataManager.local_json);\r\n        if (jsonStr) {\r\n            return JSON.parse(jsonStr)\r\n        } else return []\r\n    }\r\n\r\n    static saveUrls(state) {\r\n        localStorage.setItem(SavedDataManager.local_json, JSON.stringify(state.urls))\r\n    }\r\n}","import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { useOvermind } from \"../Others/OvermindHelper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PropTypes from \"prop-types\";\r\nimport { SavedDataManager } from \"../Others/Globals\";\r\n\r\nconst MyLinkItem = (props) => {\r\n    const { item, index } = props;\r\n    const { state, actions } = useOvermind()\r\n\r\n    return (\r\n        <Grid item item xs={12} sm={12} md={4} lg={4} xl={4}>\r\n            <Button\r\n                // target=\"_blank\" href={item?.link}\r\n                onClick={() => {\r\n                    if (state.isModeDelete) {\r\n                        actions.deleteUrl(index)\r\n                        SavedDataManager.saveUrls(state)\r\n                    } else {\r\n                        window.open(item?.link, '_self');\r\n                        // window.open(item?.link, '_blank');\r\n                    }\r\n                }} style={{ width: '100%' }} color='primary'\r\n                variant={state.isModeDelete ? 'contained' : 'outlined'}>{item?.title}</Button>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nMyLinkItem.prototype = {\r\n    item: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n        link: PropTypes.string.isRequired,\r\n    }).isRequired\r\n}\r\n\r\nexport default MyLinkItem;","import React, {useEffect} from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {useOvermind} from \"../Others/OvermindHelper\";\r\nimport {Globals, SavedDataManager} from \"../Others/Globals\";\r\nimport MyLinkItem from \"./MyLinkItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst FirstPage = (props) => {\r\n    const {state, actions} = useOvermind()\r\n    useEffect(() => {\r\n        actions.setUrls(SavedDataManager.getUrls())\r\n    }, [])\r\n\r\n    return (\r\n        <Grid style={Globals.getParentHeightWidth()} container direction='column' alignContent='center'\r\n              alignItems='center' justify='center'>\r\n            <Grid style={Globals.getContainerHeightWidth(90)} container direction='row' spacing={1} justify='center'\r\n                  alignContent='center' alignItems='center'>\r\n                {\r\n                    state.urls?.length > 0 && state.urls.map((item, index) => {\r\n                        return <MyLinkItem index={index} item={item}/>\r\n                    })\r\n                }\r\n            </Grid>\r\n            <Grid>\r\n                <Button onClick={() => {\r\n                    actions.showDialog(true)\r\n                }} style={{width: 200, margin: 8}} variant='outlined' color='primary'>ADD</Button>\r\n\r\n                <Button onClick={() => {\r\n                    actions.setDeleteMode(!state.isModeDelete)\r\n                }} style={{width: 200, margin: 8}} variant={state.isModeDelete ? 'contained' : 'outlined'}\r\n                        color='primary'>Delete</Button>\r\n            </Grid>\r\n\r\n            <Dialog onClose={() => {\r\n                actions.showDialog(false)\r\n            }} open={state.isShowingDialog}>\r\n                <DialogTitle>Add URL</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container direction='column'>\r\n                        <TextField id='title_tf' style={{marginTop: 8}} placeholder='Title'/>\r\n                        <TextField id='url_tf' style={{marginTop: 8}} placeholder='Link/URL'/>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => {\r\n                        actions.showDialog(false)\r\n                    }} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => {\r\n                        var title = document.getElementById(\"title_tf\").value.toString()\r\n                        var link = document.getElementById(\"url_tf\").value.toString()\r\n                        if (!link.startsWith(\"http\")) {\r\n                            link = \"http://\" + link\r\n                        }\r\n\r\n                        actions.addUrl({\r\n                            title: title,\r\n                            link: link,\r\n                        })\r\n                        SavedDataManager.saveUrls(state)\r\n                        actions.showDialog(false)\r\n                    }} color=\"primary\" autoFocus>\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default FirstPage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"overmind-react\";\r\nimport {overmind} from './Others/OvermindHelper'\r\nimport FirstPage from \"./Components/FirstPage\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider value={overmind}>\r\n            <FirstPage/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}